@page "/reportbyprimaryuser/{year}/{primary}"
@inject IBillsRepository Repository
@attribute [Authorize]
@if (userBillDetailsByYearMonth == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Year Total:<b>&nbsp;@yearTotal</b></p>
    @if(paidStatus == PaidStatus.FullPaid)
    {
        <p>Total Paid:&nbsp;<b><font color="green">@totalPaidByUser</font></b></p>
    }
    else if(paidStatus == PaidStatus.PartialPaid)
    {
        <p>Total Paid:&nbsp;<b><font color="purple">@totalPaidByUser</font></b></p>
    }
    else
    {
        <p>Total Paid:&nbsp;<b><font color="red">@totalPaidByUser</font></b></p>
    }
    
    <MatTable Items="@userBillDetailsByYearMonth" class="mat-elevation-z5" ShowPaging="false" PageSize=40>
        <MatTableHeader>
            <th>Month</th>
            <th>Total</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Key</td>
            <td>@context.Value</td>
        </MatTableRow>
    </MatTable>
}

@code{
    [Parameter]
    public string Year { get; set; }

    [Parameter]
    public string Primary { get; set; }

    private decimal yearTotal;
    private string totalPaidByUser = "Loading...";
    PaidStatus paidStatus = PaidStatus.NotPaid;
    private enum PaidStatus
    {
        NotPaid,
        PartialPaid,
        FullPaid
    }

    private IDictionary<string, decimal> userBillDetailsByYearMonth;
    protected override async Task OnInitializedAsync()
    {
        var users = await Repository.GetPrimaryContacts();
        // todo
        // create api for the year also
        var byMonth = new Dictionary<string, decimal>();
        yearTotal = 0.0m;
        foreach (var month in new string[]
        { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        })
        {
            var billDetails = await Repository.GetBillDetails($"{month}{Year}");
            if (billDetails.Any())
            {
                byMonth[month] = (await Repository.GetBillDetails($"{month}{Year}"))
                .Where(b => b.Primary == this.Primary)
                .Sum(b => b.Total);

                yearTotal += byMonth[month];
            }

            if (this.Year == System.DateTime.Now.Year.ToString() && System.DateTime.Now.ToString("MMM") == month)
            {
                break; // stop after current month in this year.
            }

        }

        userBillDetailsByYearMonth = byMonth;
        var task = this.GetPaidInYearByUser();
    }

    protected async Task GetPaidInYearByUser()
    {
        var users = await Repository.GetPrimaryContacts();
        var totalPaid = 0.0m;
        var currentPrimayUser = users.FirstOrDefault(u => u.Primary == this.Primary);
        if (currentPrimayUser == null)
        {
            totalPaidByUser = "NA";
            this.StateHasChanged();
            return;
        }

        // todo
        // create api for the year also
        var byMonth = new Dictionary<string, decimal>();
        foreach (var month in new string[]
        { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        })
        {
            var monthlyPayments = await Repository.GetMonthlyPayments($"{month}{Year}");
            foreach (var user in currentPrimayUser.Users)
            {
                var foundPaymentForPhone = monthlyPayments.FirstOrDefault(m => m.Number == user.Phone);
                if (foundPaymentForPhone != null)
                {
                    totalPaid += (await GetUserMonthlyBill(month, this.Year, foundPaymentForPhone.Number));
                }
            }
            if (this.Year == System.DateTime.Now.Year.ToString() && System.DateTime.Now.ToString("MMM") == month)
            {
                break; // stop after current month in this year.
            }
        }

        if( System.Math.Abs(yearTotal-totalPaid) <0.01m)
        {
            paidStatus = PaidStatus.FullPaid;
        }
        else if(totalPaid > 0.01m){
            paidStatus = PaidStatus.PartialPaid;
        }
        
        totalPaidByUser = totalPaid.ToString();
        this.StateHasChanged();
    }

    private async Task<decimal> GetUserMonthlyBill(string month, string year, string number)
    {
        var userBillDetail = (await Repository.GetBillDetails($"{month}{year}"))
        .FirstOrDefault(b => b.Number == number);
        if (userBillDetail != null)
        {
            return userBillDetail.Total;
        }

        return 0.0m;
    }

}