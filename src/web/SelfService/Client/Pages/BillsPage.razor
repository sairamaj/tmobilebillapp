@page "/"
@inject IBillsRepository Repository
@attribute [Authorize()]

@if (bills == null)
{
    @if(Error  == null)
    {
        <p><em>Loading...</em></p>
    }
}
else
{
    <MatAccordion Multi="true">
        @foreach (var @bill in @bills)
        {
            <MatExpansionPanel LazyRendering=true>
                <MatExpansionPanelSummary>
                    <MatExpansionPanelHeader>
                        <div class="mat-layout-grid mat-layout-grid-align-left" style="max-width: 800px;">
                            <div class="mat-layout-grid-inner">
                                <div class="mat-layout-grid-cell" mat-layout-grid-cell-span-4>@bill.DateAsString</div>
                                <div class="mat-layout-grid-cell" mat-layout-grid-cell-span-2>@bill.Total</div>
                                <div class="mat-layout-grid-cell" mat-layout-grid-cell-span-2>@bill.PerLine</div>
                            </div>
                        </div>
                    </MatExpansionPanelHeader>
                </MatExpansionPanelSummary>
                <MatExpansionPanelDetails>
                    <DetailComponent yearMonth="@bill.YearMonth" />
                </MatExpansionPanelDetails>
            </MatExpansionPanel>
        }
    </MatAccordion>
}
@code{
    private IEnumerable<Bill> bills;
        [CascadingParameter]
public Error Error { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            bills = (await Repository.GetBills()).OrderByDescending(b => b.Date).ToArray();
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }
}
